#include <cstdio>
#include <cstdlib>
#include <cerrno>
#include <cwchar>
#include <limits>

#include "gc_cpp.h"

#include "MAKO1toVGM.h"
#include "event1.h"
#include "toVGM1.h"
#include "tools.h"

// MAKO.COM (1,2共通)に埋め込まれているF-number (MAKO1は全オクターブ分入っているが、97番目が無い)
// なお、コンストラクタ内で直接導出する方法に変えたので使わない。
static const unsigned __int16 FNumber__old[] = {
	0x0269, 0x028E, 0x02B4, 0x02DE, 0x0309, 0x0338, 0x0369, 0x039C, 0x03D3, 0x040E, 0x044B, 0x048D };

// MAKO.COM (1,2共通)に埋め込まれているTone Period
static const unsigned __int16 TP[] = {
	0x0EED, 0x0E17, 0x0D4C, 0x0C8D, 0x0BD9, 0x0B2F, 0x0A8E, 0x09F6, 0x0967, 0x08E0, 0x0860, 0x07E8,
	0x0776, 0x070B, 0x06A6, 0x0646, 0x05EC, 0x0597, 0x0547, 0x04FB, 0x04B3, 0x0470, 0x0430, 0x03F4,
	0x03BB, 0x0385, 0x0353, 0x0323, 0x02F6, 0x02CB, 0x02A3, 0x027D, 0x0259, 0x0238, 0x0218, 0x01FA,
	0x01DD, 0x01C2, 0x01A9, 0x0191, 0x017B, 0x0165, 0x0151, 0x013E, 0x012C, 0x011C, 0x010C, 0x00FD,
	0x00EE, 0x00E1, 0x00D4, 0x00C8, 0x00BD, 0x00B2, 0x00A8, 0x009F, 0x0096, 0x008E, 0x0086, 0x007E,
	0x0077, 0x0070, 0x006A, 0x0064, 0x005E, 0x0059, 0x0054, 0x004F, 0x004B, 0x0047, 0x0043, 0x003F,
	0x003B, 0x0038, 0x0035, 0x0032, 0x002F, 0x002C, 0x002A, 0x0027, 0x0025, 0x0023, 0x0021, 0x001F,
	0x001D, 0x001C, 0x001A, 0x0019, 0x0017, 0x0016, 0x0015, 0x0013, 0x0012, 0x0011, 0x0010, 0x000F,
	0x000E };

static const struct AC_FM_PARAMETER_BYTE preset_88[127] = {
	{0x3A,0x0F,{{0x0C,0x20,0x1F,0x0C,0x04,0x1A},{0x1F,0x39,0xDF,0x02,0x04,0xF6},{0x01,0x1E,0x1F,0x0C,0x04,0x06},{0x73,0x00,0x9F,0x05,0x07,0x27}}},
	{0x3A,0x0F,{{0x01,0x1A,0x8E,0x0A,0x00,0x15},{0x2A,0x1E,0x59,0x0D,0x03,0xFF},{0x01,0x36,0x4F,0x0B,0x00,0x25},{0x11,0x00,0x52,0x03,0x00,0x28}}},
	{0x3A,0x0F,{{0x12,0x1B,0x5C,0x07,0x00,0x13},{0x1A,0x18,0x53,0x09,0x00,0x32},{0x02,0x33,0x5C,0x07,0x00,0x13},{0x12,0x00,0x4D,0x04,0x00,0x07}}},
	{0x3A,0x0F,{{0x31,0x21,0x9C,0x04,0x03,0x17},{0x0C,0x47,0xDB,0x09,0x01,0x02},{0x64,0x31,0x9C,0x04,0x03,0x06},{0x01,0x00,0xDA,0x03,0x00,0xA5}}},
	{0x20,0x0F,{{0x36,0x1C,0xDF,0x07,0x07,0x29},{0x35,0x3A,0xDF,0x06,0x06,0x19},{0x30,0x16,0x9F,0x09,0x06,0x19},{0x31,0x00,0x9F,0x06,0x08,0xF9}}},
	{0x3D,0x0F,{{0x35,0x27,0xDF,0x12,0x00,0x2F},{0x78,0x11,0x1F,0x04,0x00,0x0F},{0x52,0x1B,0x1F,0x0F,0x00,0x0F},{0x31,0x00,0x1F,0x0F,0x00,0x0F}}},
	{0x04,0x0F,{{0x58,0x1F,0x94,0x02,0x00,0x07},{0x54,0x1B,0x90,0x02,0x00,0x07},{0x60,0x1F,0x92,0x02,0x00,0x05},{0x10,0x00,0x92,0x02,0x00,0x06}}},
	{0x3B,0x0F,{{0x56,0x28,0xDF,0x09,0x03,0xE5},{0x06,0x33,0x54,0x07,0x00,0xF5},{0x33,0x26,0xD0,0x0B,0x00,0x25},{0x03,0x00,0x8F,0x04,0x00,0x08}}},
	{0x3A,0x0F,{{0x31,0x1F,0xD9,0x0B,0x00,0x13},{0x39,0x28,0xDC,0x0C,0x0C,0x5B},{0x32,0x32,0x56,0x00,0x00,0x1B},{0x34,0x00,0x54,0x06,0x00,0x0B}}},
	{0x3B,0x0F,{{0x01,0x27,0x5F,0x00,0x00,0x00},{0x02,0x24,0x13,0x0B,0x00,0x4B},{0x04,0x33,0x5F,0x0F,0x00,0x09},{0x01,0x00,0x53,0x0F,0x00,0x09}}},
	{0x24,0x0F,{{0x39,0x1E,0x5F,0x10,0x00,0xBA},{0x76,0x19,0xDB,0x07,0x0A,0x85},{0x05,0x41,0x9E,0x0C,0x0B,0xF6},{0x01,0x00,0x9E,0x05,0x0A,0xF5}}},
	{0x3A,0x0F,{{0x0C,0x20,0x1F,0x0C,0x04,0x1A},{0x1F,0x39,0xDF,0x02,0x04,0xF6},{0x01,0x1E,0x1F,0x0C,0x04,0x06},{0x73,0x00,0x9F,0x05,0x07,0x27}}},
	{0x1C,0x0F,{{0x33,0x16,0x1D,0x04,0x01,0x20},{0x21,0x0F,0x1D,0x04,0x03,0x03},{0x35,0x19,0xCA,0x04,0x04,0x30},{0x33,0x00,0x5E,0x04,0x03,0x03}}},
	{0x3C,0x0F,{{0x71,0x20,0xDF,0x00,0x08,0x40},{0x11,0x0A,0x99,0x07,0x07,0x37},{0x23,0x1C,0xDF,0x00,0x08,0x40},{0x61,0x00,0x99,0x08,0x06,0x37}}},
	{0x07,0x0F,{{0x3F,0x00,0x1E,0x10,0x04,0xA7},{0x5F,0x00,0x14,0x14,0x14,0x07},{0x5F,0x00,0x0A,0x14,0x14,0x07},{0x3F,0x00,0x02,0x14,0x0E,0x07}}},
	{0x3E,0x0F,{{0x0F,0x25,0x44,0x0A,0x02,0x04},{0x01,0x2A,0x44,0x0A,0x02,0x04},{0x00,0x14,0x44,0x0C,0x02,0x03},{0x03,0x00,0x4A,0x0C,0x02,0x03}}},
	{0x36,0x0F,{{0x3F,0x0F,0x02,0x02,0x02,0x07},{0x53,0x00,0x04,0x08,0x03,0x07},{0x55,0x19,0x0E,0x0E,0x05,0x07},{0x3F,0x0F,0x0A,0x04,0x0A,0x17}}},
	{0x3A,0x0F,{{0x00,0x0E,0x4C,0x05,0x01,0x55},{0x30,0x14,0x50,0x04,0x01,0x25},{0x30,0x06,0x9D,0x06,0x05,0x25},{0x34,0x00,0x89,0x04,0x1F,0xA8}}},
	{0x23,0x0F,{{0x3F,0x31,0x1F,0x1A,0x05,0x0B},{0x5F,0x2C,0x1F,0x1A,0x09,0x0B},{0x5F,0x11,0x1F,0x11,0x01,0xA7},{0x36,0x00,0x9F,0x0C,0x01,0xF8}}},
	{0x04,0x0F,{{0x58,0x1F,0x92,0x02,0x00,0x07},{0x54,0x1B,0x92,0x02,0x00,0x07},{0x60,0x1F,0x92,0x02,0x00,0x05},{0x10,0x00,0x92,0x02,0x00,0x06}}},
	{0x07,0x01,{{0x01,0x00,0x1F,0x00,0x00,0x1F},{0x02,0x00,0x1F,0x00,0x00,0x1F},{0x03,0x00,0x1F,0x00,0x00,0x1F},{0x04,0x00,0x1F,0x00,0x00,0x1F}}},
	{0x3A,0x0F,{{0x02,0x19,0x8D,0x06,0x02,0x18},{0x26,0x20,0x4F,0x08,0x00,0x18},{0x02,0x2A,0x15,0x07,0x00,0x28},{0x12,0x00,0x52,0x04,0x00,0x28}}},
	{0x3A,0x0F,{{0x01,0x1A,0x8E,0x0A,0x00,0x15},{0x2A,0x1E,0x59,0x0D,0x03,0xFF},{0x01,0x36,0x4F,0x0B,0x00,0x25},{0x11,0x00,0x52,0x03,0x00,0x28}}},
	{0x3A,0x0F,{{0x01,0x17,0x8D,0x0E,0x00,0x13},{0x07,0x28,0x8D,0x0E,0x00,0xFA},{0x01,0x26,0x8E,0x0E,0x00,0x13},{0x01,0x00,0x53,0x03,0x00,0x0A}}},
	{0x3A,0x0F,{{0x11,0x1D,0x59,0x0A,0x00,0x15},{0x15,0x0F,0x59,0x0B,0x00,0x58},{0x01,0x30,0x5C,0x0D,0x00,0x26},{0x11,0x00,0x4E,0x04,0x00,0x06}}},
	{0x3A,0x0F,{{0x12,0x1B,0x5C,0x07,0x00,0x13},{0x1A,0x18,0x53,0x09,0x00,0x32},{0x02,0x33,0x5C,0x07,0x00,0x13},{0x12,0x00,0x4D,0x04,0x00,0x07}}},
	{0x14,0x0F,{{0x11,0x17,0x9A,0x0F,0x00,0x26},{0x21,0x0A,0x98,0x0C,0x05,0x28},{0x0A,0x39,0xDA,0x07,0x03,0x46},{0x11,0x00,0xD8,0x0C,0x05,0x28}}},
	{0x1C,0x0F,{{0x3F,0x28,0x9F,0x0F,0x08,0x8A},{0x01,0x14,0xDB,0x07,0x0A,0x86},{0x01,0x2A,0x9E,0x06,0x0B,0xF6},{0x01,0x00,0x5E,0x06,0x00,0xF7}}},
	{0x3A,0x0F,{{0x31,0x21,0x9C,0x04,0x03,0x17},{0x0C,0x47,0xDB,0x09,0x01,0x02},{0x64,0x31,0x9C,0x04,0x03,0x06},{0x01,0x00,0xDA,0x03,0x00,0xA5}}},
	{0x39,0x0F,{{0x32,0x29,0xDF,0x07,0x04,0xF7},{0x33,0x23,0xDF,0x04,0x04,0xFB},{0x33,0x2B,0xDF,0x04,0x04,0xFB},{0x31,0x00,0x9F,0x0A,0x03,0x0B}}},
	{0x20,0x0F,{{0x36,0x1C,0xDF,0x07,0x07,0x29},{0x35,0x3A,0xDF,0x06,0x06,0x19},{0x30,0x16,0x9F,0x09,0x06,0x19},{0x31,0x00,0x9F,0x06,0x08,0xF9}}},
	{0x30,0x0F,{{0x30,0x17,0x9E,0x0E,0x08,0xB6},{0x30,0x3F,0xD8,0x0A,0x08,0xB6},{0x30,0x17,0xDC,0x04,0x08,0xB6},{0x30,0x00,0xDC,0x05,0x08,0xB6}}},
	{0x3D,0x0F,{{0x35,0x27,0xDF,0x12,0x00,0x2F},{0x78,0x11,0x1F,0x04,0x00,0x0F},{0x52,0x1B,0x1F,0x0F,0x00,0x0F},{0x31,0x00,0x1F,0x0F,0x00,0x0F}}},
	{0x1F,0x0F,{{0x66,0x11,0x1C,0x12,0x00,0xFF},{0x31,0x0A,0x9F,0x0F,0x00,0x0F},{0x53,0x0A,0x1F,0x0F,0x00,0x0F},{0x22,0x00,0x1F,0x0F,0x00,0x0F}}},
	{0x04,0x0F,{{0x58,0x1F,0x94,0x02,0x00,0x07},{0x54,0x1B,0x90,0x02,0x00,0x07},{0x60,0x1F,0x92,0x02,0x00,0x05},{0x10,0x00,0x92,0x02,0x00,0x06}}},
	{0x1C,0x0F,{{0x14,0x26,0x92,0x0A,0x02,0x47},{0x12,0x19,0x12,0x04,0x00,0x08},{0x0C,0x26,0x5E,0x06,0x02,0x19},{0x06,0x00,0x59,0x05,0x00,0x09}}},
	{0x3B,0x0F,{{0x56,0x28,0xDF,0x09,0x03,0xE5},{0x06,0x33,0x54,0x07,0x00,0xF5},{0x33,0x26,0xD0,0x0B,0x00,0x25},{0x03,0x00,0x8F,0x04,0x00,0x08}}},
	{0x3E,0x0F,{{0x04,0x23,0x1F,0x0A,0x0F,0x59},{0x04,0x0C,0x14,0x06,0x00,0xF9},{0x04,0x0A,0x14,0x0B,0x00,0x19},{0x04,0x00,0x14,0x0B,0x00,0x19}}},
	{0x3A,0x0F,{{0x31,0x1F,0xD9,0x0B,0x00,0x13},{0x39,0x28,0xDC,0x0C,0x0C,0x5B},{0x32,0x32,0x56,0x00,0x00,0x1B},{0x34,0x00,0x54,0x06,0x00,0x0B}}},
	{0x3B,0x0F,{{0x01,0x27,0x5F,0x00,0x00,0x00},{0x02,0x24,0x13,0x0B,0x00,0x4B},{0x04,0x33,0x5F,0x0F,0x00,0x09},{0x01,0x00,0x53,0x0F,0x00,0x09}}},
	{0x1C,0x0F,{{0x3B,0x21,0xDF,0x0E,0x00,0xFF},{0x01,0x15,0xDE,0x09,0x07,0x16},{0x07,0x17,0x5F,0x10,0x05,0xA0},{0x51,0x00,0xDE,0x07,0x04,0x17}}},
	{0x24,0x0F,{{0x39,0x1E,0x5F,0x10,0x00,0xBA},{0x76,0x19,0xDB,0x07,0x0A,0x85},{0x05,0x41,0x9E,0x0C,0x0B,0xF6},{0x01,0x00,0x9E,0x05,0x0A,0xF5}}},
	{0x3C,0x0F,{{0x35,0x19,0x59,0x17,0x0A,0xE8},{0x21,0x0C,0x59,0x0E,0x0B,0xF8},{0x33,0x1B,0x59,0x14,0x0B,0xE8},{0x31,0x00,0x59,0x0E,0x0C,0xF8}}},
	{0x38,0x0F,{{0x33,0x1E,0xDA,0x08,0x05,0x27},{0x34,0x1E,0xDD,0x05,0x04,0x14},{0x31,0x1E,0xDC,0x04,0x02,0x36},{0x31,0x00,0xDF,0x0A,0x03,0x15}}},
	{0x02,0x0F,{{0x37,0x1C,0x9F,0x06,0x06,0x01},{0x39,0x45,0x9F,0x06,0x06,0x01},{0x21,0x1D,0x9F,0x0C,0x06,0x01},{0x31,0x00,0x9F,0x0C,0x06,0x05}}},
	{0x3B,0x0F,{{0x3C,0x21,0xDF,0x04,0x04,0xF7},{0x39,0x22,0x1F,0x05,0x04,0x07},{0x30,0x07,0x1F,0x04,0x04,0x17},{0x31,0x00,0xDF,0x01,0x02,0xAC}}},
	{0x3A,0x0F,{{0x0C,0x20,0x1F,0x0C,0x04,0x1A},{0x1F,0x39,0xDF,0x02,0x04,0xF6},{0x01,0x1E,0x1F,0x0C,0x04,0x06},{0x73,0x00,0x9F,0x05,0x07,0x27}}},
	{0x1C,0x0F,{{0x33,0x16,0x1D,0x04,0x01,0x20},{0x21,0x0F,0x1D,0x04,0x03,0x03},{0x35,0x19,0xCA,0x04,0x04,0x30},{0x33,0x00,0x5E,0x04,0x03,0x03}}},
	{0x39,0x0F,{{0x02,0x1C,0x5F,0x0C,0x00,0xF4},{0x01,0x2A,0x5F,0x0D,0x06,0x15},{0x02,0x30,0x1F,0x06,0x05,0x15},{0x01,0x00,0x9F,0x0C,0x07,0x14}}},
	{0x3C,0x0F,{{0x31,0x1A,0x10,0x06,0x01,0x03},{0x31,0x0A,0x12,0x03,0x06,0x0C},{0x3B,0x24,0x1F,0x0F,0x06,0xF2},{0x31,0x00,0x1F,0x0F,0x04,0xF2}}},
	{0x38,0x0F,{{0x3A,0x28,0x14,0x05,0x00,0x99},{0x0A,0x33,0x14,0x08,0x00,0x09},{0x11,0x1D,0x10,0x02,0x00,0x09},{0x02,0x00,0x0E,0x08,0x00,0x19}}},
	{0x04,0x0F,{{0x53,0x23,0x56,0x05,0x06,0x64},{0x03,0x0A,0x99,0x0C,0x06,0x15},{0x38,0x1C,0x54,0x07,0x06,0x64},{0x33,0x00,0x99,0x0C,0x06,0x65}}},
	{0x39,0x0F,{{0x55,0x16,0x1D,0x06,0x00,0xF4},{0x57,0x2A,0x1D,0x00,0x06,0x04},{0x55,0x25,0x1D,0x0D,0x06,0x24},{0x05,0x00,0x1F,0x00,0x07,0x05}}},
	{0x3C,0x0F,{{0x35,0x0A,0x4D,0x02,0x02,0x08},{0x39,0x15,0xCD,0x02,0x02,0x08},{0x34,0x29,0x0C,0x01,0x01,0x56},{0x30,0x00,0x14,0x01,0x01,0x18}}},
	{0x3E,0x0F,{{0x02,0x30,0x04,0x00,0x02,0x05},{0x02,0x1D,0x04,0x00,0x02,0x05},{0x02,0x1B,0x04,0x00,0x02,0x05},{0x01,0x00,0x00,0x00,0x02,0x05}}},
	{0x3E,0x0F,{{0x38,0x31,0xDF,0x0A,0x0F,0x59},{0x32,0x25,0xD4,0x06,0x00,0xF9},{0x32,0x53,0xDF,0x0B,0x0F,0x19},{0x32,0x00,0x15,0x0B,0x09,0x19}}},
	{0x3C,0x0F,{{0x3F,0x29,0xD2,0x0C,0x0A,0xF7},{0x21,0x16,0xDE,0x0F,0x0B,0xF7},{0x37,0x30,0xDE,0x0E,0x0B,0xE7},{0x31,0x00,0xDE,0x0A,0x01,0x17}}},
	{0x34,0x0F,{{0x01,0x1F,0x10,0x01,0x00,0x18},{0x01,0x00,0x10,0x02,0x00,0x18},{0x01,0x1F,0x10,0x01,0x00,0x18},{0x01,0x00,0x10,0x02,0x00,0x18}}},
	{0x3C,0x0F,{{0x0F,0x0E,0x1F,0x00,0x00,0x08},{0x00,0x11,0x1F,0x0F,0x11,0x2C},{0x00,0x13,0x1F,0x18,0x00,0xB8},{0x00,0x00,0x1F,0x13,0x10,0x2C}}},
	{0x3B,0x0F,{{0x7F,0x00,0x1F,0x15,0x13,0x26},{0x78,0x23,0x1F,0x15,0x0C,0x26},{0x07,0x20,0x1F,0x15,0x0D,0x36},{0x02,0x00,0x1F,0x13,0x10,0x29}}},
	{0x34,0x0F,{{0x00,0x0D,0x1F,0x01,0x00,0x25},{0x0E,0x14,0x1F,0x0D,0x0F,0xFA},{0x50,0x1D,0x1F,0x16,0x07,0x68},{0x11,0x00,0x5F,0x14,0x14,0xF8}}},
	{0x34,0x0F,{{0x07,0x17,0x1E,0x13,0x1E,0xD8},{0x05,0x0A,0x1F,0x0E,0x1C,0x1B},{0x5E,0x16,0xDF,0x13,0x0D,0x4C},{0x3A,0x00,0xDF,0x0F,0x0A,0x19}}},
	{0x3B,0x0F,{{0x3C,0x1C,0x5E,0x0D,0x19,0x55},{0x14,0x2E,0x1F,0x00,0x00,0x05},{0x04,0x18,0x1F,0x03,0x02,0x31},{0x04,0x15,0x50,0x00,0x00,0x07}}},
	{0x3B,0x0F,{{0x38,0x26,0x5E,0x0F,0x05,0x55},{0x12,0x1B,0x1F,0x07,0x00,0x05},{0x02,0x3A,0x1F,0x04,0x03,0x31},{0x02,0x15,0x50,0x05,0x00,0x07}}},
	{0x38,0x0F,{{0x0A,0x48,0x1E,0x0D,0x05,0x64},{0x00,0x19,0x1F,0x03,0x01,0x34},{0x01,0x1F,0x1F,0x04,0x03,0x34},{0x01,0x15,0x0E,0x05,0x05,0x08}}},
	{0x3C,0x0F,{{0x04,0x1B,0x5F,0x14,0x00,0xFA},{0x04,0x15,0x5D,0x10,0x00,0xF7},{0x02,0x21,0x5B,0x12,0x00,0xFA},{0x04,0x15,0x56,0x12,0x05,0xD7}}},
	{0x3C,0x0F,{{0x64,0x20,0x1F,0x05,0x05,0x43},{0x64,0x15,0x0C,0x04,0x05,0x46},{0x22,0x2A,0x19,0x05,0x05,0x43},{0x24,0x15,0x0C,0x04,0x05,0x46}}},
	{0x3C,0x0F,{{0x04,0x1E,0x12,0x08,0x04,0x27},{0x04,0x15,0x17,0x0A,0x05,0x29},{0x04,0x1D,0x13,0x08,0x04,0x37},{0x04,0x15,0x17,0x0A,0x05,0x39}}},
	{0x39,0x0F,{{0x0C,0x1C,0x10,0x08,0x01,0x28},{0x0C,0x1F,0x14,0x09,0x01,0x29},{0x08,0x20,0x18,0x08,0x01,0x28},{0x08,0x15,0x16,0x09,0x02,0x39}}},
	{0x3A,0x0F,{{0x01,0x25,0x0B,0x07,0x04,0x26},{0x01,0x27,0x0C,0x07,0x04,0x26},{0x01,0x26,0x0C,0x08,0x04,0x26},{0x01,0x15,0x0E,0x07,0x05,0x29}}},
	{0x3A,0x0F,{{0x00,0x1E,0x0F,0x0A,0x0A,0x75},{0x32,0x1E,0x0F,0x14,0x0A,0xA5},{0x00,0x1D,0x0E,0x0B,0x08,0x75},{0x00,0x15,0x17,0x0D,0x07,0x39}}},
	{0x3A,0x0F,{{0x01,0x22,0x0F,0x06,0x04,0x27},{0x07,0x2E,0x11,0x17,0x04,0xA7},{0x01,0x1E,0x0F,0x06,0x04,0x27},{0x01,0x15,0x17,0x08,0x05,0x28}}},
	{0x3C,0x0F,{{0x54,0x1C,0x10,0x06,0x01,0x47},{0x34,0x15,0x17,0x05,0x02,0x29},{0x32,0x1D,0x10,0x06,0x01,0x27},{0x52,0x15,0x16,0x08,0x02,0x29}}},
	{0x3C,0x0F,{{0x04,0x1D,0x0F,0x07,0x01,0x27},{0x04,0x15,0x18,0x08,0x02,0x2A},{0x03,0x1E,0x0E,0x07,0x01,0x27},{0x03,0x15,0x16,0x08,0x02,0x2A}}},
	{0x2C,0x0F,{{0x04,0x24,0x15,0x02,0x02,0x4A},{0x04,0x15,0x11,0x02,0x03,0x2A},{0x04,0x26,0x13,0x02,0x03,0x4A},{0x04,0x15,0x14,0x03,0x03,0x2A}}},
	{0x3C,0x0F,{{0x08,0x2A,0x16,0x02,0x02,0x2A},{0x08,0x15,0x14,0x05,0x02,0x2A},{0x08,0x29,0x15,0x0F,0x02,0x2A},{0x08,0x15,0x17,0x05,0x03,0x2A}}},
	{0x3B,0x0F,{{0x04,0x25,0x14,0x0C,0x02,0xD7},{0x04,0x2A,0x14,0x04,0x02,0x27},{0x04,0x27,0x12,0x04,0x02,0x27},{0x02,0x15,0x14,0x04,0x03,0x29}}},
	{0x3A,0x0F,{{0x04,0x26,0x14,0x04,0x03,0x27},{0x04,0x2A,0x13,0x03,0x03,0x37},{0x02,0x26,0x14,0x03,0x03,0x37},{0x08,0x15,0x14,0x04,0x04,0x3A}}},
	{0x3B,0x0F,{{0x01,0x22,0x14,0x02,0x02,0x47},{0x04,0x23,0x14,0x02,0x02,0x47},{0x01,0x23,0x12,0x03,0x02,0x47},{0x04,0x15,0x14,0x04,0x03,0x49}}},
	{0x3B,0x0F,{{0x01,0x21,0x12,0x06,0x02,0x77},{0x06,0x28,0x11,0x04,0x03,0x67},{0x01,0x1E,0x13,0x06,0x03,0x37},{0x02,0x15,0x14,0x08,0x04,0x2A}}},
	{0x3B,0x0F,{{0x08,0x2A,0x5D,0x07,0x05,0xF5},{0x02,0x2B,0x5D,0x07,0x05,0xF5},{0x02,0x28,0x5D,0x06,0x04,0xF5},{0x02,0x15,0x5E,0x08,0x05,0xE7}}},
	{0x24,0x0F,{{0x08,0x36,0x5E,0x05,0x05,0xD7},{0x72,0x15,0x5E,0x08,0x05,0xD7},{0x02,0x28,0x5E,0x08,0x05,0xD7},{0x12,0x15,0x5F,0x08,0x05,0xD6}}},
	{0x3C,0x0F,{{0x0F,0x41,0x5E,0x0F,0x05,0xD6},{0x32,0x15,0x5E,0x08,0x05,0xD8},{0x52,0x1B,0x5E,0x07,0x05,0xD6},{0x02,0x15,0x9E,0x07,0x05,0xD8}}},
	{0x36,0x0F,{{0x72,0x1C,0x1F,0x14,0x00,0x48},{0x14,0x15,0x1D,0x00,0x00,0x0A},{0x74,0x15,0x1D,0x00,0x00,0x0A},{0x12,0x15,0x1D,0x00,0x00,0x0A}}},
	{0x24,0x0F,{{0x01,0x1A,0x1A,0x00,0x00,0x05},{0x04,0x15,0x1A,0x00,0x00,0x08},{0x06,0x21,0x1D,0x00,0x00,0x05},{0x04,0x15,0x1D,0x00,0x00,0x08}}},
	{0x3B,0x0F,{{0x0C,0x21,0x5E,0x05,0x03,0xA7},{0x04,0x2B,0x5E,0x05,0x03,0x77},{0x02,0x28,0x5C,0x05,0x03,0x77},{0x04,0x15,0x5F,0x09,0x04,0x7A}}},
	{0x3B,0x0F,{{0x0C,0x23,0x5E,0x05,0x05,0xA7},{0x01,0x27,0x5E,0x06,0x05,0x57},{0x01,0x1E,0x5E,0x07,0x06,0x57},{0x04,0x15,0x9E,0x06,0x05,0x5A}}},
	{0x3C,0x0F,{{0x04,0x23,0x1F,0x03,0x01,0x3A},{0x04,0x15,0x1F,0x03,0x01,0x2A},{0x08,0x1E,0x1F,0x10,0x01,0x3A},{0x14,0x15,0x1F,0x03,0x02,0x2A}}},
	{0x38,0x0F,{{0x02,0x19,0x18,0x06,0x02,0x59},{0x02,0x26,0x1A,0x06,0x02,0x59},{0x12,0x22,0x1A,0x06,0x02,0x39},{0x02,0x15,0x1E,0x03,0x03,0x39}}},
	{0x3B,0x0F,{{0x0C,0x30,0x59,0x0C,0x02,0xE5},{0x02,0x2A,0x58,0x04,0x03,0xD5},{0x04,0x2A,0x59,0x08,0x03,0xD5},{0x02,0x15,0x9B,0x07,0x04,0xD7}}},
	{0x3B,0x0F,{{0x0C,0x2D,0x5A,0x0F,0x04,0xE6},{0x06,0x32,0x5B,0x05,0x04,0xD6},{0x06,0x28,0x5C,0x07,0x04,0xD6},{0x02,0x15,0x9E,0x07,0x04,0xD8}}},
	{0x38,0x0F,{{0x77,0x19,0x58,0x17,0x04,0x45},{0x02,0x19,0x5E,0x04,0x04,0x85},{0x02,0x1F,0x5E,0x04,0x04,0x35},{0x14,0x15,0x5E,0x05,0x05,0x39}}},
	{0x39,0x0F,{{0x0E,0x24,0x5F,0x0B,0x02,0x85},{0x06,0x23,0x55,0x06,0x02,0xD5},{0x02,0x28,0x5B,0x05,0x02,0xD5},{0x02,0x15,0x5E,0x08,0x06,0xD8}}},
	{0x3B,0x0F,{{0x05,0x31,0x5E,0x0E,0x04,0xF7},{0x00,0x20,0x5E,0x05,0x04,0xC7},{0x00,0x21,0x5E,0x05,0x04,0xC7},{0x00,0x15,0x5C,0x07,0x05,0xC8}}},
	{0x2B,0x0F,{{0x07,0x20,0x5E,0x0C,0x0A,0x77},{0x03,0x26,0x5A,0x08,0x02,0x57},{0x00,0x19,0x5B,0x09,0x02,0x77},{0x01,0x15,0x9F,0x06,0x03,0x69}}},
	{0x39,0x0F,{{0x03,0x2E,0x57,0x16,0x02,0xE7},{0x00,0x1C,0x5B,0x07,0x02,0xD7},{0x00,0x25,0x5C,0x02,0x02,0xD7},{0x01,0x15,0x5A,0x0C,0x06,0xD8}}},
	{0x38,0x0F,{{0x01,0x24,0x5C,0x14,0x05,0xE7},{0x00,0x22,0x5E,0x0D,0x05,0xD7},{0x00,0x10,0x5C,0x06,0x05,0xD7},{0x01,0x15,0x5E,0x07,0x05,0xD9}}},
	{0x34,0x0F,{{0x00,0x2A,0x1D,0x19,0x00,0x47},{0x00,0x15,0x1D,0x17,0x14,0x2B},{0x01,0x12,0x1C,0x1A,0x00,0xF9},{0x00,0x15,0x1C,0x17,0x12,0x2B}}},
	{0x3C,0x0F,{{0x03,0x00,0x1E,0x01,0x01,0x07},{0x04,0x15,0x1E,0x1A,0x10,0x1B},{0x02,0x00,0x1E,0x19,0x0A,0xC8},{0x01,0x15,0x1E,0x14,0x0A,0xFC}}},
	{0x3C,0x0F,{{0x1F,0x09,0x1E,0x1C,0x00,0x17},{0x12,0x15,0x1D,0x19,0x11,0x4C},{0x6F,0x00,0x1E,0x19,0x00,0x28},{0x67,0x15,0x1E,0x19,0x13,0x5D}}},
	{0x39,0x0F,{{0x0F,0x05,0x1F,0x00,0x00,0x05},{0x0D,0x0A,0x1F,0x00,0x00,0x05},{0x0F,0x0A,0x1F,0x00,0x00,0x05},{0x0F,0x15,0x1E,0x10,0x0D,0x58}}},
	{0x12,0x0F,{{0x00,0x1E,0x1C,0x10,0x0A,0xFA},{0x01,0x14,0x1A,0x10,0x0A,0xFA},{0x01,0x1C,0x1C,0x0F,0x0A,0xFA},{0x01,0x15,0x19,0x0F,0x0A,0xFA}}},
	{0x39,0x0F,{{0x0F,0x24,0x1E,0x14,0x0A,0xFA},{0x00,0x14,0x1A,0x0E,0x0A,0xFA},{0x01,0x14,0x1A,0x10,0x0A,0xFA},{0x01,0x15,0x1C,0x0F,0x0A,0xFA}}},
	{0x39,0x0F,{{0x0F,0x15,0x1E,0x17,0x0A,0xFA},{0x00,0x11,0x1E,0x14,0x0A,0xFA},{0x04,0x19,0x1E,0x10,0x0A,0xFA},{0x02,0x15,0x1E,0x10,0x0A,0xFA}}},
	{0x13,0x0F,{{0x0F,0x16,0x5F,0x1A,0x00,0xFA},{0x08,0x26,0x5F,0x13,0x00,0xFA},{0x08,0x23,0x5F,0x11,0x00,0xFA},{0x04,0x15,0x5F,0x10,0x00,0xF8}}},
	{0x2B,0x0F,{{0x08,0x2A,0x5B,0x17,0x08,0xE9},{0x04,0x24,0x5B,0x10,0x08,0xE9},{0x04,0x27,0x5B,0x0E,0x08,0xE8},{0x02,0x15,0x5C,0x0C,0x0A,0xF7}}},
	{0x11,0x0F,{{0x0F,0x03,0x5F,0x1B,0x0A,0xD2},{0x0E,0x1B,0x5F,0x0D,0x0A,0xD2},{0x08,0x3C,0x5F,0x0C,0x0A,0xD4},{0x08,0x15,0x5F,0x0E,0x0A,0xA4}}},
	{0x2E,0x0F,{{0x0E,0x28,0x5A,0x10,0x0A,0xC4},{0x64,0x15,0x59,0x0C,0x0A,0xC4},{0x64,0x15,0x58,0x0A,0x0A,0xC4},{0x24,0x15,0x57,0x0A,0x0A,0xA4}}},
	{0x13,0x0F,{{0x05,0x20,0x1C,0x0F,0x0A,0xF8},{0x03,0x23,0x19,0x0A,0x0A,0xF4},{0x30,0x0B,0x1C,0x15,0x0A,0xF4},{0x54,0x15,0x1A,0x0A,0x0A,0xF5}}},
	{0x24,0x0F,{{0x07,0x2A,0x17,0x14,0x0B,0xFA},{0x03,0x15,0x16,0x15,0x0C,0x5A},{0x03,0x2A,0x14,0x10,0x0B,0xFA},{0x04,0x15,0x15,0x10,0x0C,0x5A}}},
	{0x3C,0x0F,{{0x05,0x00,0x1F,0x10,0x02,0x5C},{0x0F,0x15,0x15,0x16,0x05,0xFC},{0x00,0x00,0x00,0x00,0x00,0x00},{0x00,0x15,0x00,0x00,0x00,0x00}}},
	{0x11,0x0F,{{0x0F,0x14,0x5F,0x1C,0x00,0xF8},{0x0F,0x28,0x5F,0x1A,0x00,0xF8},{0x0E,0x2A,0x5F,0x13,0x00,0xF8},{0x0A,0x15,0x5F,0x12,0x00,0xFA}}},
	{0x3C,0x0F,{{0x67,0x21,0x5C,0x0E,0x08,0x75},{0x62,0x15,0x5C,0x05,0x02,0xC4},{0x27,0x21,0x5C,0x03,0x02,0xC5},{0x22,0x15,0x5C,0x05,0x02,0xC4}}},
	{0x03,0x0F,{{0x0D,0x2A,0x1C,0x16,0x0A,0xF3},{0x07,0x1E,0x1C,0x0A,0x0A,0xF3},{0x07,0x1C,0x19,0x11,0x0A,0xD4},{0x02,0x15,0x1B,0x11,0x0A,0xD9}}},
	{0x2C,0x0F,{{0x6E,0x2B,0x5C,0x0C,0x05,0xF4},{0x64,0x15,0x58,0x0A,0x05,0xE4},{0x2F,0x31,0x5C,0x0C,0x05,0xD4},{0x24,0x15,0x58,0x0C,0x05,0xE5}}},
	{0x29,0x0F,{{0x0C,0x23,0x5E,0x12,0x04,0xD3},{0x02,0x25,0x5E,0x07,0x03,0xD3},{0x04,0x24,0x5C,0x07,0x03,0xD3},{0x04,0x15,0x5E,0x0A,0x05,0xD6}}},
	{0x29,0x0F,{{0x0C,0x25,0x5B,0x12,0x01,0xD3},{0x01,0x20,0x5E,0x0A,0x02,0xD3},{0x02,0x1E,0x5D,0x08,0x02,0xD3},{0x03,0x15,0x5E,0x0C,0x05,0xD7}}},
	{0x2E,0x0F,{{0x02,0x25,0x0C,0x02,0x02,0x2A},{0x02,0x15,0x0E,0x02,0x03,0x2A},{0x02,0x15,0x0D,0x02,0x03,0x2A},{0x02,0x15,0x0C,0x03,0x03,0x2A}}},
	{0x2E,0x0F,{{0x08,0x24,0x15,0x05,0x01,0x2A},{0x04,0x15,0x16,0x05,0x01,0x2A},{0x04,0x15,0x15,0x03,0x01,0x2A},{0x04,0x15,0x14,0x05,0x02,0x2C}}},
	{0x39,0x0F,{{0x08,0x26,0x11,0x05,0x01,0x18},{0x04,0x26,0x14,0x05,0x01,0x18},{0x02,0x2C,0x14,0x05,0x01,0x18},{0x04,0x15,0x12,0x05,0x02,0x1A}}},
	{0x3B,0x0F,{{0x39,0x28,0x1F,0x05,0x05,0xE3},{0x5F,0x32,0x1F,0x05,0x05,0xA3},{0x55,0x19,0x1C,0x19,0x0A,0xA3},{0x3F,0x15,0x19,0x0A,0x05,0xE5}}},
	{0x3B,0x0F,{{0x38,0x22,0x16,0x05,0x01,0x18},{0x02,0x30,0x16,0x05,0x01,0x18},{0x02,0x26,0x16,0x05,0x01,0x18},{0x14,0x15,0x11,0x05,0x02,0x1A}}},
	{0x39,0x0F,{{0x0E,0x28,0x5E,0x15,0x06,0xD4},{0x06,0x27,0x5A,0x08,0x06,0xD4},{0x04,0x2A,0x5E,0x0A,0x06,0xD4},{0x02,0x15,0x5E,0x0A,0x08,0xD5}}},
	{0x3B,0x0F,{{0x22,0x1C,0x58,0x05,0x01,0xA4},{0x64,0x23,0x57,0x08,0x02,0xB4},{0x22,0x26,0x58,0x06,0x02,0xB4},{0x06,0x15,0x59,0x06,0x03,0xB5}}},
	{0x3B,0x0F,{{0x36,0x1A,0x5F,0x09,0x01,0xD4},{0x14,0x2C,0x5E,0x07,0x01,0xD5},{0x02,0x28,0x5F,0x0E,0x01,0x55},{0x02,0x15,0x5A,0x09,0x03,0xA5}}},
	{0x3B,0x0F,{{0x3F,0x26,0x5F,0x08,0x05,0xE4},{0x5C,0x2A,0x5F,0x0A,0x05,0xE4},{0x3C,0x32,0x5F,0x0C,0x05,0xE4},{0x58,0x15,0x5C,0x0A,0x04,0x85}}},
	{0x38,0x0F,{{0x3E,0x0C,0x5A,0x10,0x0F,0x83},{0x5F,0x1B,0x58,0x18,0x10,0x83},{0x38,0x21,0x5A,0x0C,0x0A,0xF3},{0x58,0x15,0x5A,0x0C,0x04,0x84}}} };

static const struct AC_FM_PARAMETER_BYTE preset_98[82] = {
	{0x3A,0x0F,{{0x0C,0x20,0x1F,0x0C,0x04,0x1A},{0x1F,0x39,0xDF,0x02,0x04,0xF6},{0x01,0x1E,0x1F,0x0C,0x04,0x06},{0x73,0x00,0x9F,0x05,0x07,0x27}}},
	{0x3A,0x0F,{{0x01,0x1A,0x8E,0x07,0x00,0x35},{0x2A,0x1E,0x59,0x08,0x03,0xAF},{0x71,0x34,0x4F,0x08,0x00,0x35},{0x01,0x00,0x52,0x03,0x00,0x28}}},
	{0x3A,0x0F,{{0x12,0x1F,0x59,0x07,0x00,0x13},{0x1A,0x18,0x53,0x09,0x00,0x32},{0x02,0x2A,0x59,0x07,0x00,0x13},{0x12,0x00,0x4D,0x04,0x00,0x07}}},
	{0x3A,0x0F,{{0x21,0x21,0x9C,0x04,0x03,0x17},{0x0C,0x47,0xDB,0x09,0x01,0x02},{0x74,0x2D,0x9C,0x04,0x03,0x06},{0x01,0x00,0xDA,0x03,0x00,0xA5}}},
	{0x20,0x0F,{{0x36,0x1C,0xDF,0x07,0x07,0x29},{0x35,0x3A,0xDF,0x06,0x06,0x19},{0x30,0x16,0x9F,0x09,0x06,0x19},{0x31,0x00,0x9F,0x06,0x08,0xF9}}},
	{0x3D,0x0F,{{0x35,0x2A,0xDF,0x12,0x00,0x2F},{0x78,0x11,0x1F,0x04,0x00,0x0F},{0x62,0x1B,0x1F,0x0F,0x00,0x0F},{0x31,0x05,0x1F,0x0F,0x00,0x0F}}},
	{0x04,0x0F,{{0x58,0x1F,0x94,0x1F,0x00,0x07},{0x54,0x1B,0x90,0x1F,0x00,0x07},{0x60,0x1F,0x92,0x1F,0x00,0x05},{0x10,0x00,0x93,0x1F,0x00,0x08}}},
	{0x2B,0x0F,{{0x16,0x55,0xD7,0x09,0x03,0xA9},{0x04,0x43,0xD5,0x07,0x00,0x59},{0x32,0x31,0x8F,0x1F,0x00,0x09},{0x02,0x00,0x0F,0x1F,0x00,0x0A}}},
	{0x3A,0x0F,{{0x31,0x1F,0xD9,0x0B,0x00,0x19},{0x39,0x2D,0xDC,0x0C,0x0C,0x5A},{0x35,0x37,0x56,0x00,0x00,0x1A},{0x34,0x07,0x52,0x1F,0x00,0x0B}}},
	{0x3B,0x0F,{{0x01,0x43,0x5F,0x1F,0x00,0x07},{0x02,0x24,0x13,0x0B,0x00,0x47},{0x04,0x2F,0x5F,0x1F,0x00,0x09},{0x01,0x00,0x53,0x1F,0x00,0x09}}},
	{0x24,0x0F,{{0x3B,0x11,0x5E,0x18,0x13,0xB2},{0x19,0x1B,0xDB,0x13,0x0A,0x83},{0x05,0x2D,0x9D,0x0C,0x0B,0xF5},{0x01,0x00,0x9E,0x05,0x0A,0xF4}}},
	{0x3A,0x0F,{{0x0C,0x20,0x1F,0x0C,0x04,0x1A},{0x1F,0x39,0xDF,0x02,0x04,0xF6},{0x01,0x1E,0x1F,0x0C,0x04,0x06},{0x73,0x00,0x9F,0x05,0x07,0x27}}},
	{0x3C,0x0F,{{0x59,0x21,0x17,0x14,0x00,0x74},{0x2B,0x23,0x19,0x08,0x03,0xF5},{0x67,0x19,0xD9,0x14,0x00,0x74},{0x04,0x00,0x5F,0x03,0x05,0xF5}}},
	{0x3C,0x0F,{{0x51,0x22,0xDF,0x00,0x08,0x40},{0x11,0x0A,0x99,0x07,0x07,0x37},{0x23,0x20,0xDF,0x00,0x08,0x40},{0x61,0x00,0x99,0x07,0x06,0x37}}},
	{0x07,0x0F,{{0x3F,0x00,0x1E,0x10,0x04,0xA7},{0x5F,0x00,0x14,0x14,0x14,0x07},{0x5F,0x00,0x0A,0x14,0x14,0x07},{0x3F,0x00,0x02,0x14,0x0E,0x07}}},
	{0x3E,0x0F,{{0x0F,0x25,0x47,0x0A,0x02,0x04},{0x01,0x2A,0x47,0x0A,0x02,0x04},{0x00,0x14,0x47,0x0C,0x02,0x03},{0x03,0x00,0x4A,0x0C,0x02,0x03}}},
	{0x36,0x0F,{{0x3F,0x0F,0x04,0x02,0x02,0x07},{0x53,0x00,0x06,0x08,0x03,0x07},{0x55,0x19,0x0E,0x0E,0x05,0x07},{0x3F,0x0F,0x0A,0x04,0x0A,0x18}}},
	{0x3A,0x0F,{{0x00,0x0E,0x4C,0x05,0x01,0x55},{0x30,0x14,0x50,0x04,0x01,0x25},{0x30,0x06,0x9D,0x06,0x05,0x25},{0x34,0x00,0x89,0x04,0x1F,0xA8}}},
	{0x23,0x0F,{{0x3F,0x31,0x1F,0x1A,0x05,0x0B},{0x5F,0x2C,0x1F,0x1A,0x09,0x0B},{0x5F,0x11,0x1F,0x11,0x01,0xA7},{0x36,0x00,0x9F,0x0C,0x01,0xF8}}},
	{0x04,0x0F,{{0x58,0x1E,0x92,0x02,0x00,0x07},{0x54,0x0A,0x92,0x02,0x00,0x07},{0x60,0x25,0x92,0x02,0x00,0x05},{0x10,0x00,0x92,0x02,0x00,0x06}}},
	{0x07,0x01,{{0x01,0x00,0x1F,0x00,0x00,0x1F},{0x02,0x00,0x1F,0x00,0x00,0x1F},{0x03,0x00,0x1F,0x00,0x00,0x1F},{0x04,0x00,0x1F,0x00,0x00,0x1F}}},
	{0x3A,0x0F,{{0x02,0x19,0x8D,0x06,0x02,0x18},{0x26,0x1E,0x4F,0x08,0x00,0x18},{0x02,0x2A,0x15,0x07,0x00,0x28},{0x12,0x00,0x52,0x04,0x00,0x28}}},
	{0x3A,0x0F,{{0x01,0x1A,0x8E,0x07,0x00,0x35},{0x2A,0x1E,0x59,0x08,0x03,0xAF},{0x71,0x34,0x4F,0x08,0x00,0x35},{0x01,0x00,0x52,0x03,0x00,0x28}}},
	{0x3A,0x0F,{{0x02,0x17,0x8C,0x0D,0x00,0x13},{0x0E,0x28,0x8C,0x0D,0x00,0xFA},{0x02,0x26,0x8C,0x0D,0x00,0x13},{0x02,0x00,0x53,0x03,0x00,0x0A}}},
	{0x3A,0x0F,{{0x11,0x1C,0x54,0x0A,0x00,0x15},{0x17,0x1E,0x59,0x0A,0x00,0x58},{0x01,0x28,0x54,0x0D,0x00,0x26},{0x11,0x00,0x4E,0x04,0x00,0x06}}},
	{0x3A,0x0F,{{0x12,0x1F,0x59,0x07,0x00,0x13},{0x1A,0x18,0x53,0x09,0x00,0x32},{0x02,0x2A,0x59,0x07,0x00,0x13},{0x12,0x00,0x4D,0x04,0x00,0x07}}},
	{0x14,0x0F,{{0x11,0x19,0x9A,0x0F,0x00,0x26},{0x21,0x0A,0x98,0x0C,0x05,0x28},{0x0A,0x39,0xDA,0x07,0x03,0x46},{0x11,0x00,0xD8,0x0C,0x05,0x28}}},
	{0x1C,0x0F,{{0x3F,0x23,0x9F,0x0F,0x08,0x8A},{0x01,0x1B,0xDB,0x07,0x0A,0x86},{0x01,0x2A,0x9E,0x06,0x0B,0xF6},{0x01,0x00,0x5E,0x06,0x00,0xF7}}},
	{0x3A,0x0F,{{0x21,0x21,0x9C,0x04,0x03,0x17},{0x0C,0x47,0xDB,0x09,0x01,0x02},{0x74,0x2D,0x9C,0x04,0x03,0x06},{0x01,0x00,0xDA,0x03,0x00,0xA5}}},
	{0x39,0x0F,{{0x32,0x28,0xDF,0x09,0x04,0xF7},{0x33,0x1A,0xDF,0x06,0x04,0xFB},{0x33,0x28,0xDF,0x06,0x04,0xFB},{0x31,0x00,0x9F,0x0C,0x03,0x0B}}},
	{0x20,0x0F,{{0x36,0x1C,0xDF,0x07,0x07,0x29},{0x35,0x3A,0xDF,0x06,0x06,0x19},{0x30,0x16,0x9F,0x09,0x06,0x19},{0x31,0x00,0x9F,0x06,0x08,0xF9}}},
	{0x30,0x0F,{{0x30,0x17,0x9E,0x0E,0x06,0xB6},{0x30,0x44,0xD8,0x0A,0x06,0xB6},{0x30,0x17,0xDC,0x04,0x06,0xB6},{0x30,0x00,0xDC,0x05,0x03,0xB6}}},
	{0x3D,0x0F,{{0x35,0x2A,0xDF,0x12,0x00,0x2F},{0x78,0x11,0x1F,0x04,0x00,0x0F},{0x62,0x1B,0x1F,0x0F,0x00,0x0F},{0x31,0x05,0x1F,0x0F,0x00,0x0F}}},
	{0x1F,0x0F,{{0x66,0x0C,0x1C,0x12,0x00,0xFF},{0x31,0x0A,0x9F,0x0F,0x00,0x0F},{0x53,0x0A,0x1F,0x0F,0x00,0x0F},{0x22,0x00,0x1F,0x0F,0x00,0x0F}}},
	{0x04,0x0F,{{0x58,0x1F,0x94,0x1F,0x00,0x07},{0x54,0x1B,0x90,0x1F,0x00,0x07},{0x60,0x1F,0x92,0x1F,0x00,0x05},{0x10,0x00,0x93,0x1F,0x00,0x08}}},
	{0x1C,0x0F,{{0x14,0x26,0x92,0x0A,0x02,0x47},{0x12,0x1E,0x12,0x04,0x00,0x08},{0x0C,0x26,0x5E,0x06,0x02,0x19},{0x06,0x00,0x59,0x05,0x00,0x09}}},
	{0x2B,0x0F,{{0x16,0x55,0xD7,0x09,0x03,0xA9},{0x04,0x43,0xD5,0x07,0x00,0x59},{0x32,0x31,0x8F,0x1F,0x00,0x09},{0x02,0x00,0x0F,0x1F,0x00,0x0A}}},
	{0x3E,0x0F,{{0x08,0x28,0x99,0x0A,0x0F,0x59},{0x08,0x08,0x92,0x06,0x00,0xF9},{0x08,0x1E,0x14,0x0B,0x00,0x19},{0x08,0x00,0x13,0x0B,0x00,0x19}}},
	{0x3A,0x0F,{{0x31,0x1F,0xD9,0x0B,0x00,0x19},{0x39,0x2D,0xDC,0x0C,0x0C,0x5A},{0x35,0x37,0x56,0x00,0x00,0x1A},{0x34,0x07,0x52,0x1F,0x00,0x0B}}},
	{0x3B,0x0F,{{0x01,0x43,0x5F,0x1F,0x00,0x07},{0x02,0x24,0x13,0x0B,0x00,0x47},{0x04,0x2F,0x5F,0x1F,0x00,0x09},{0x01,0x00,0x53,0x1F,0x00,0x09}}},
	{0x1C,0x0F,{{0x3B,0x21,0xDF,0x0E,0x00,0xFF},{0x01,0x0A,0xDE,0x09,0x07,0x16},{0x07,0x17,0x5F,0x10,0x05,0xA0},{0x31,0x00,0xDE,0x07,0x04,0x17}}},
	{0x24,0x0F,{{0x3B,0x11,0x5E,0x18,0x13,0xB2},{0x19,0x1B,0xDB,0x13,0x0A,0x83},{0x05,0x2D,0x9D,0x0C,0x0B,0xF5},{0x01,0x00,0x9E,0x05,0x0A,0xF4}}},
	{0x3C,0x0F,{{0x73,0x19,0x59,0x16,0x0A,0xE8},{0x21,0x12,0x5F,0x0D,0x0B,0xF8},{0x33,0x1B,0x59,0x13,0x0B,0xE8},{0x31,0x00,0x59,0x0D,0x0C,0xF8}}},
	{0x38,0x0F,{{0x33,0x1E,0xDA,0x08,0x05,0x27},{0x34,0x1E,0xDD,0x05,0x04,0x14},{0x31,0x1E,0xDC,0x04,0x02,0x36},{0x31,0x00,0xDF,0x0A,0x03,0x15}}},
	{0x02,0x0F,{{0x37,0x1C,0x9F,0x06,0x06,0x01},{0x39,0x45,0x9F,0x06,0x06,0x01},{0x21,0x1D,0x9F,0x0C,0x06,0x01},{0x31,0x05,0x9F,0x0C,0x06,0x05}}},
	{0x3B,0x0F,{{0x3C,0x21,0xDF,0x04,0x04,0xF7},{0x39,0x22,0x1F,0x05,0x04,0x07},{0x30,0x07,0x1F,0x04,0x04,0x17},{0x31,0x08,0xDF,0x01,0x02,0xAC}}},
	{0x3A,0x0F,{{0x0C,0x20,0x1F,0x0C,0x04,0x1A},{0x1F,0x39,0xDF,0x02,0x04,0xF6},{0x01,0x1E,0x1F,0x0C,0x04,0x06},{0x73,0x00,0x9F,0x05,0x07,0x27}}},
	{0x3C,0x0F,{{0x59,0x21,0x17,0x14,0x00,0x74},{0x2B,0x23,0x19,0x08,0x03,0xF5},{0x67,0x19,0xD9,0x14,0x00,0x74},{0x04,0x00,0x5F,0x03,0x05,0xF5}}},
	{0x39,0x0F,{{0x02,0x1E,0x5F,0x0C,0x00,0xF4},{0x01,0x26,0x5F,0x0D,0x06,0x15},{0x02,0x2D,0x1F,0x06,0x05,0x15},{0x01,0x00,0x9F,0x0C,0x07,0x14}}},
	{0x3C,0x0F,{{0x31,0x1B,0x0F,0x0B,0x03,0x18},{0x01,0x00,0x13,0x03,0x06,0x0C},{0x3B,0x28,0x1F,0x0A,0x06,0xF5},{0x37,0x03,0x1F,0x0A,0x04,0xF5}}},
	{0x38,0x0F,{{0x5C,0x2D,0x14,0x05,0x00,0x99},{0x0A,0x23,0x14,0x1F,0x00,0x09},{0x12,0x21,0x10,0x1F,0x00,0x09},{0x04,0x05,0x0E,0x08,0x00,0x19}}},
	{0x04,0x0F,{{0x53,0x23,0x56,0x05,0x06,0x65},{0x03,0x0A,0x99,0x02,0x06,0x16},{0x38,0x1C,0x54,0x07,0x06,0x65},{0x33,0x00,0x99,0x0C,0x06,0x66}}},
	{0x3A,0x0F,{{0x50,0x19,0x99,0x13,0x00,0x54},{0x60,0x09,0x9D,0x0D,0x07,0x25},{0x20,0x1D,0xDF,0x05,0x05,0x35},{0x00,0x00,0x1F,0x05,0x00,0xF6}}},
	{0x3C,0x0F,{{0x35,0x0A,0x4D,0x1F,0x02,0x08},{0x39,0x15,0xCD,0x1F,0x02,0x08},{0x34,0x29,0x0C,0x01,0x01,0x56},{0x30,0x00,0x14,0x01,0x01,0x18}}},
	{0x3E,0x0F,{{0x02,0x29,0x0F,0x1F,0x02,0x05},{0x02,0x17,0x0F,0x1F,0x02,0x05},{0x02,0x17,0x0F,0x1F,0x02,0x05},{0x01,0x00,0x09,0x1F,0x02,0x05}}},
	{0x3E,0x0F,{{0x38,0x31,0xDF,0x0A,0x0F,0x5A},{0x32,0x25,0xD4,0x06,0x00,0xFA},{0x32,0x53,0xDF,0x0B,0x0F,0x1A},{0x32,0x00,0x15,0x0B,0x09,0x1B}}},
	{0x3C,0x0F,{{0x3F,0x21,0xD2,0x0C,0x0A,0xF7},{0x21,0x16,0xD9,0x0F,0x0B,0xF7},{0x37,0x1E,0xDB,0x0E,0x0B,0xE7},{0x31,0x00,0xDE,0x0A,0x01,0x37}}},
	{0x34,0x0F,{{0x01,0x1E,0x10,0x01,0x00,0x18},{0x01,0x00,0x10,0x02,0x00,0x18},{0x01,0x1F,0x10,0x01,0x00,0x18},{0x01,0x08,0x10,0x02,0x00,0x18}}},
	{0x3C,0x0F,{{0x0F,0x0C,0xDF,0x1F,0x00,0x08},{0x02,0x0F,0x1F,0x0F,0x11,0x2C},{0x00,0x13,0x1F,0x18,0x00,0xB8},{0x01,0x00,0x1F,0x13,0x10,0x2C}}},
	{0x38,0x0F,{{0x09,0x07,0xDF,0x13,0x0D,0x5C},{0x07,0x00,0xDF,0x13,0x0D,0x5C},{0x00,0x25,0x17,0x13,0x0F,0x5C},{0x01,0x00,0x17,0x1F,0x0F,0x0B}}},
	{0x34,0x0F,{{0x00,0x0D,0x1F,0x01,0x00,0x25},{0x0E,0x14,0x1F,0x0D,0x0F,0xFA},{0x50,0x1D,0x1F,0x16,0x07,0x68},{0x11,0x00,0x5F,0x14,0x14,0xF8}}},
	{0x34,0x0F,{{0x07,0x17,0x1E,0x13,0x1E,0xD8},{0x05,0x0A,0x1F,0x0E,0x1C,0x1B},{0x5E,0x16,0xDF,0x13,0x0D,0x4C},{0x3A,0x00,0xDF,0x0F,0x0A,0x19}}},
	{0x3C,0x0F,{{0x28,0x19,0x1D,0x0C,0x00,0xF6},{0x35,0x0A,0x1D,0x0C,0x00,0xF6},{0x37,0x1A,0x1F,0x0C,0x00,0xF6},{0x05,0x14,0x1F,0x0C,0x00,0xF6}}},
	{0x3B,0x0F,{{0x36,0x05,0xDC,0x11,0x0B,0x27},{0x07,0x23,0x1F,0x13,0x00,0x77},{0x5F,0x11,0xDC,0x13,0x0B,0xF7},{0x04,0x00,0x1F,0x0D,0x0B,0xF6}}},
	{0x3A,0x0F,{{0x11,0x1C,0x53,0x0A,0x00,0x17},{0x37,0x1E,0x53,0x10,0x00,0x3A},{0x20,0x28,0x51,0x10,0x00,0x18},{0x10,0x00,0x4B,0x1F,0x00,0x08}}},
	{0x3A,0x0F,{{0x10,0x1F,0x0E,0x04,0x00,0x27},{0x50,0x2B,0x0F,0x04,0x00,0x37},{0x30,0x1F,0x0F,0x08,0x00,0x37},{0x01,0x00,0x11,0x00,0x0C,0x38}}},
	{0x3A,0x0F,{{0x02,0x28,0x8D,0x06,0x02,0x18},{0x23,0x28,0x4F,0x08,0x00,0x18},{0x62,0x2A,0x15,0x07,0x00,0x28},{0x12,0x00,0x52,0x04,0x00,0x28}}},
	{0x3A,0x0F,{{0x51,0x21,0xDA,0x09,0x07,0xF4},{0x25,0x33,0x9B,0x03,0x00,0xF4},{0x03,0x2B,0xDC,0x03,0x00,0xF4},{0x01,0x00,0x1F,0x05,0x00,0xF7}}},
	{0x3C,0x0F,{{0x01,0x24,0xDC,0x05,0x09,0xF4},{0x01,0x00,0x1F,0x09,0x00,0xF6},{0x22,0x23,0x53,0x0B,0x00,0x19},{0x02,0x00,0x0F,0x1F,0x00,0x0B}}},
	{0x3B,0x0F,{{0x1B,0x30,0xD0,0x08,0x00,0xF6},{0x36,0x37,0x1F,0x0C,0x00,0xF6},{0x33,0x0C,0x12,0x0C,0x00,0xF6},{0x01,0x03,0xDF,0x1F,0x02,0x07}}},
	{0x20,0x0F,{{0x38,0x10,0xDF,0x07,0x07,0x29},{0x37,0x3C,0xDF,0x06,0x06,0x19},{0x30,0x0C,0x90,0x09,0x06,0x19},{0x31,0x00,0x9F,0x06,0x08,0xF9}}},
	{0x3A,0x0F,{{0x0C,0x28,0x0E,0x08,0x00,0xF6},{0x08,0x32,0x16,0x08,0x00,0x36},{0x02,0x1E,0x16,0x08,0x00,0x36},{0x02,0x00,0x1D,0x1F,0x00,0x08}}},
	{0x38,0x0F,{{0x6E,0x15,0x1F,0x1F,0x00,0x03},{0x03,0x0D,0x07,0x1F,0x00,0x04},{0x3B,0x25,0x1F,0x07,0x00,0xA5},{0x04,0x00,0x09,0x07,0x00,0x55}}},
	{0x3A,0x0F,{{0x30,0x19,0x05,0x05,0x03,0x33},{0x21,0x11,0x0D,0x1F,0x00,0x55},{0x5A,0x1D,0x19,0x05,0x0B,0x77},{0x00,0x00,0x1F,0x1F,0x00,0x04}}},
	{0x3C,0x0F,{{0x3F,0x11,0x1F,0x13,0x0B,0xA5},{0x2E,0x00,0x1F,0x13,0x0B,0xA5},{0x3F,0x23,0x13,0x0B,0x13,0xA7},{0x08,0x00,0x13,0x0B,0x13,0xA7}}},
	{0x3A,0x0F,{{0x12,0x2D,0x91,0x1F,0x00,0x0A},{0x6A,0x17,0xDF,0x15,0x00,0x4A},{0x01,0x31,0x8F,0x1F,0x00,0x1A},{0x02,0x00,0x0B,0x1F,0x00,0x09}}},
	{0x2A,0x0F,{{0x30,0x2B,0xDF,0x07,0x0B,0xF7},{0x20,0x29,0x9A,0x05,0x00,0x77},{0x22,0x31,0xDA,0x05,0x00,0xA7},{0x00,0x00,0x1C,0x05,0x00,0x77}}},
	{0x3E,0x0F,{{0x1E,0x23,0x1F,0x0B,0x0B,0xF5},{0x3A,0x15,0x0F,0x0B,0x0B,0xF4},{0x26,0x07,0x15,0x0B,0x0B,0xF5},{0x04,0x00,0x1F,0x0B,0x0B,0xF6}}},
	{0x05,0x0F,{{0x36,0x48,0x9A,0x05,0x00,0x12},{0x1F,0x25,0xD5,0x03,0x00,0x23},{0x34,0x25,0xD5,0x03,0x00,0x15},{0x34,0x00,0x0B,0x1F,0x00,0x08}}},
	{0x07,0x0F,{{0x33,0x07,0xCD,0x1F,0x00,0x07},{0x30,0x00,0x8B,0x1F,0x00,0x08},{0x24,0x07,0xC6,0x1F,0x00,0x09},{0x12,0x00,0x8B,0x1F,0x00,0x0B}}},
	{0x2D,0x0F,{{0x24,0x4D,0xC6,0x1F,0x00,0x08},{0x3F,0x0C,0x86,0x1F,0x00,0x0A},{0x36,0x0C,0x86,0x1F,0x00,0x0A},{0x39,0x0C,0x86,0x1F,0x00,0x0A}}},
	{0x3C,0x0F,{{0x38,0x11,0x1F,0x13,0x0B,0xA5},{0x26,0x07,0x19,0x13,0x0B,0xA5},{0x38,0x1B,0x13,0x0B,0x13,0xA7},{0x38,0x00,0x19,0x0B,0x13,0xA7}}} };

#define MASTERCLOCK_NEC_OPN (3993600)
#define MASTERCLOCK_FMTOWNS_OPN2 (7200000)

VGMdata1::VGMdata1(size_t elems, enum class Machine M_arch)
{
	this->bytes = elems * 10;
	this->length = this->bytes;
	this->vgm_out = (unsigned __int8*)GC_malloc(sizeof(unsigned __int8) * this->length);
	this->T.S.Connect = 7;
	if (this->vgm_out == NULL) {
		wprintf_s(L"Memory allocation error.\n");
		exit(-2);
	}

	this->vgm_pos = this->vgm_out;
	this->arch = M_arch;

	if (this->arch == Machine::PC88VA) {
		this->preset = preset_88;
		h_vgm.lngHzYM2203 = this->master_clock = MASTERCLOCK_NEC_OPN;
		h_vgm.bytAYFlagYM2203 = 0x1;
		wprintf_s(L"PC-88VA mode.\n");
	}
	else if (this->arch == Machine::FMTOWNS) {
		this->preset = preset_98;
		h_vgm.lngHzYM2612 = this->master_clock = MASTERCLOCK_FMTOWNS_OPN2;
		wprintf_s(L"FM TOWNS mode.\n");
	}
	else {
		this->preset = preset_98;
		h_vgm.lngHzYM2203 = this->master_clock = MASTERCLOCK_NEC_OPN;
		h_vgm.bytAYFlagYM2203 = 0x1;
		wprintf_s(L"PC-9801 mode.\n");
	}

	if (this->arch == Machine::FMTOWNS) {
		for (size_t i = 0; i < 12; i++) {
			double Freq = 440.0L * pow(2.0L, (-9.0L + i) / 12.0L);
			double fFNumber = 144.0L * Freq * pow(2.0L, 21.0L - 4) / this->master_clock;
			this->FNumber[i] = fFNumber + 0.5;
		}
	}
	else {
		for (size_t i = 0; i < 12; i++) {
			double Freq = 440.0L * pow(2.0L, (-9.0L + i) / 12.0L);
			double fFNumber = 72.0L * Freq * pow(2.0L, 21.0L - 4) / this->master_clock;
			this->FNumber[i] = fFNumber + 0.5;
		}
	}

	pCHparam = new struct CH_params[6];
}

void VGMdata1::enlarge(void)
{
	size_t vgm_length_current = this->vgm_pos - this->vgm_out;
	size_t loop_current = this->vgm_loop_pos - this->vgm_out;
	this->length += this->bytes;
	this->vgm_out = (unsigned __int8*)GC_realloc(this->vgm_out, sizeof(unsigned __int8) * this->length);
	if (this->vgm_out == NULL) {
		wprintf_s(L"Memory allocation error.\n");
		exit(-2);
	}
	this->vgm_pos = this->vgm_out + vgm_length_current;
	this->vgm_loop_pos = this->vgm_out + loop_current;
}

void VGMdata1::make_data(unsigned __int8 command, unsigned __int8 address, unsigned __int8 data)
{
	*this->vgm_pos++ = command;
	*this->vgm_pos++ = address;
	*this->vgm_pos++ = data;
}

void VGMdata1::make_init(void)
{
	const static unsigned char Init_YM2203[] = {
		0x55, 0x00, 'W', 0x55, 0x00, 'A', 0x55, 0x00, 'O', 0x55, 0x27, 0x30, 0x55, 0x07, 0xBF,
		0x55, 0x90, 0x00, 0x55, 0x91, 0x00, 0x55, 0x92, 0x00, 0x55, 0x24, 0x70, 0x55, 0x25, 0x00 };

	const static unsigned char Init_YM2612[] = {
		0x52, 0x27, 0x30, 0x52, 0x90, 0x00, 0x52, 0x91, 0x00, 0x52, 0x92, 0x00, 0x52, 0x24, 0x70, 0x52, 0x25, 0x00 };


	const unsigned char* Init;
	size_t Init_len;

	if (this->arch == Machine::FMTOWNS) {
		Init = Init_YM2612;
		Init_len = sizeof(Init_YM2612);
	}
	else {
		Init = Init_YM2203;
		Init_len = sizeof(Init_YM2203);
	}

	memcpy_s(this->vgm_pos, Init_len, Init, Init_len);
	this->vgm_pos += Init_len;
}

void VGMdata1::make_wait(size_t wait)
{
	while (wait) {
		const size_t wait0 = 0xFFFF;
		const size_t wait1 = 882;
		const size_t wait2 = 735;
		const size_t wait3 = 16;

		if (wait >= wait0) {
			*this->vgm_pos++ = 0x61;
			*((unsigned __int16*)this->vgm_pos) = wait0;
			this->vgm_pos += 2;
			wait -= wait0;
		}
		else if (wait == wait1 * 2 || wait == wait1 + wait2 || (wait <= wait1 + wait3 && wait >= wait1)) {
			*this->vgm_pos++ = 0x63;
			wait -= wait1;
		}
		else if (wait == wait2 * 2 || (wait <= wait2 + wait3 && wait >= wait2)) {
			*this->vgm_pos++ = 0x62;
			wait -= wait2;
		}
		else if (wait <= wait3 * 2 && wait >= wait3) {
			*this->vgm_pos++ = 0x7F;
			wait -= wait3;
		}
		else if (wait <= 15) {
			*this->vgm_pos++ = 0x70 | (wait - 1);
			wait = 0;
		}
		else {
			*this->vgm_pos++ = 0x61;
			*((unsigned __int16*)this->vgm_pos) = wait;
			this->vgm_pos += 2;
			wait = 0;
		}
	}
}

void VGMdata1::convert_YM2203(struct EVENT& eve)
{
	this->CH_cur = eve.CH;
	this->pCHparam_cur = this->pCHparam + this->CH_cur;

	switch (eve.Event) {
	case 0xF4: // Tempo 注意!! ここが変わると累積時間も変わる!! 必ず再計算せよ!!
		this->Time_Prev_VGM = ((this->Time_Prev_VGM * this->Tempo * 2) / eve.Param + 1) >> 1;
		this->Tempo = eve.Param;

		// この後のNAの計算とタイマ割り込みの設定は実際には不要
		this->Timer_set_YM2203();
		break;
	case 0xF5: // Tone select
		if (this->CH_cur < 3) {
			this->pCHparam_cur->Tone = eve.Param & 0x7F;
			this->Tone_select_YM2203_FM(this->CH_cur);
		}
		break;
	case 0x80: // Note Off
		if (this->CH_cur < 3) {
			this->make_data_YM2203(0x28, this->CH_cur);
		}
		else {
			this->SSG_out |= (1 << (this->CH_cur - 3));
			this->make_data_YM2203(0x07, this->SSG_out);
		}
		break;
	case 0xF9: // Volume change FMはアルゴリズムに合わせてスロット音量を変える仕様

		if (this->CH_cur < 3) {
			this->pCHparam_cur->Volume = ~eve.Param & 0x7F;
			this->Volume_YM2203_FM(this->CH_cur);
		}
		else {
			this->pCHparam_cur->Volume = eve.Param;
			this->make_data_YM2203(0x08 + this->CH_cur - 3, this->pCHparam_cur->Volume);
		}
		break;
	case 0x90: // Note on
		if (this->CH_cur < 3) {
			this->Note_on_YM2203_FM(this->CH_cur);
		}
		else {
			this->Note_on_YM2203_SSG(this->CH_cur - 3);
		}
		break;
	case 0x97: // Key_set
		this->pCHparam_cur->Key = eve.Param;
		if (this->CH_cur < 3) {
			this->Key_set_YM2203_FM(this->CH_cur);
		}
		else {
			this->Key_set_YM2203_SSG(this->CH_cur - 3);
		}
		break;
	}
}

void VGMdata1::Key_set_YM2203_FM(unsigned __int8 CH)
{
	union {
		struct {
			unsigned __int16 FNumber : 11;
			unsigned __int16 Block : 3;
			unsigned __int16 : 2;
		} S;
		unsigned __int8 B[2];
	} U;

	unsigned __int8 Octave = this->pCHparam_cur->Key / 12;
	U.S.FNumber = this->FNumber[this->pCHparam_cur->Key % 12];
	if (Octave == 8) {
		U.S.FNumber <<= 1;
		Octave = 7;
	}
	U.S.Block = Octave;

	this->make_data_YM2203(0xA4 + CH, U.B[1]);
	this->make_data_YM2203(0xA0 + CH, U.B[0]);
}

void VGMdata1::Note_on_YM2203_FM(unsigned __int8 CH)
{
	union {
		struct {
			unsigned __int8 CH : 2;
			unsigned __int8 : 2;
			unsigned __int8 Op_mask : 4;
		} S;
		unsigned __int8 B;
	} U;

	U.S = { CH, this->T.S.OPR_MASK };
	this->make_data_YM2203(0x28, U.B);
}

void VGMdata1::Key_set_YM2203_SSG(unsigned __int8 CH)
{
	union {
		unsigned __int16 W;
		unsigned __int8 B[2];
	} U;

	U.W = TP[this->pCHparam_cur->Key];

	this->make_data_YM2203(0x01 + CH * 2, U.B[1]);
	this->make_data_YM2203(0x00 + CH * 2, U.B[0]);
}

void VGMdata1::Note_on_YM2203_SSG(unsigned __int8 CH)
{
	this->SSG_out &= ~(1 << CH);
	this->make_data_YM2203(0x07, this->SSG_out);
}

void VGMdata1::Timer_set_YM2203(void)
{
	size_t NA = 1024 - (((this->master_clock * 2) / (192LL * this->Tempo) + 1) >> 1);
	this->make_data_YM2203(0x24, (NA >> 2) & 0xFF);
	this->make_data_YM2203(0x25, NA & 0x03);
}

void VGMdata1::Volume_YM2203_FM(unsigned __int8 CH)
{
	for (size_t op = 0; op < 4; op++) {
		if (this->pCHparam_cur->Algorithm == 7 || this->pCHparam_cur->Algorithm > 4 && op || this->pCHparam_cur->Algorithm > 3 && op >= 2 || op == 3) {
			this->make_data_YM2203(0x40 + 4 * op + CH, this->pCHparam_cur->Volume);
		}
	}
}

void VGMdata1::Tone_select_YM2203_FM(unsigned __int8 CH)
{
	static unsigned __int8 Op_index[4] = { 0, 8, 4, 0xC };
	this->T.B = *(this->preset + this->pCHparam_cur->Tone);
	this->pCHparam_cur->Algorithm = this->T.S.Connect;

	this->make_data_YM2203(0xB0 + CH, this->T.B.FB_CON);

	for (size_t op = 0; op < 4; op++) {
		for (size_t j = 0; j < 6; j++) {
			if (j == 1 && (this->pCHparam_cur->Algorithm == 7 || this->pCHparam_cur->Algorithm > 4 && op || this->pCHparam_cur->Algorithm > 3 && op == 1 || op == 3)) {
			}
			else {
				this->make_data_YM2203(0x30 + 0x10 * j + Op_index[op] + CH, *((unsigned __int8*)&T.B.Op[op].DT_MULTI + j));
			}
		}
	}
}

void VGMdata1::finish(void)
{
	*this->vgm_pos++ = 0x66;
	this->vgm_dlen = this->vgm_pos - this->vgm_out;

	if (this->Ex_Vols_count) {
		this->vgm_extra_len = sizeof(VGM_HDR_EXTRA) + 1 + sizeof(VGMX_CHIP_DATA16) + this->padsize;
	}

	size_t vgm_data_abs = this->vgm_header_len + this->vgm_extra_len;
	this->h_vgm.lngTotalSamples = this->Time_Prev_VGM_abs;
	this->h_vgm.lngDataOffset = vgm_data_abs - ((UINT8*)&this->h_vgm.lngDataOffset - (UINT8*)&this->h_vgm.fccVGM);
	this->h_vgm.lngExtraOffset = this->vgm_header_len - ((UINT8*)&this->h_vgm.lngExtraOffset - (UINT8*)&this->h_vgm.fccVGM);
	this->h_vgm.lngEOFOffset = vgm_data_abs + this->vgm_dlen - ((UINT8*)&this->h_vgm.lngEOFOffset - (UINT8*)&this->h_vgm.fccVGM);

	if (loop_start != NULL) {
		this->h_vgm.lngLoopSamples = this->Time_Prev_VGM_abs - this->Time_Loop_VGM_abs;
		this->h_vgm.lngLoopOffset = vgm_data_abs + (this->vgm_loop_pos - this->vgm_out) - ((UINT8*)&this->h_vgm.lngLoopOffset - (UINT8*)&this->h_vgm.fccVGM);
	}
}

void VGMdata1::convert(class EVENTS& in)
{
	for (struct EVENT* src = in.event; (src - in.event) <= in.length; src++) {
		if (this->vgm_pos - this->vgm_out + 200 >= this->length) {
			this->enlarge();
			wprintf_s(L"Memory reallocated in making VGM.\n");
		}
		if (src->time == SIZE_MAX || this->length == 0) {
			break;
		}
		if (src->time - this->Time_Prev) {
			// Tqn = 60 / Tempo
			// TPQN = 48
			// Ttick = Tqn / 48
			// c_VGMT = Ttick * src_time * VGM_CLOCK 
			//        = 60 / Tempo / 48 * ticks * VGM_CLOCK
			//        = 60 * VGM_CLOCK * ticks / (48 * tempo)
			//        = 60 * VGM_CLOCK * ticks / (48 * master_clock / (192 * (1024 - NA)) (OPN) 
			//        = 60 * VGM_CLOCK * ticks / (48 * master_clock / (384 * (1024 - NA)) (OPNA) 
			//        = 60 * VGM_CLOCK * ticks / (48 * master_clock * 3 / (512 * (1024 - NA)) (OPM) 
			//
			// 本来、更にNAの整数演算に伴う計算誤差を加味すれば正確になるが、20分鳴らして2-4秒程度なので無視する事とした。
			// 一度はそうしたコードも書いたのでレポジトリの履歴を追えば見つかる。
			// MAKO2は長さを9/10として調整したが、MAKO1では6/5とする(闘神都市 PC-9801版のMAKO1とMAKO2の比較から割り出し)
			// VAはBIOSが演奏するので調整しない。


			size_t c_VGMT;
			if (this->arch == Machine::PC88VA) {
				c_VGMT = (src->time * 60 * VGM_CLOCK * 2 / (48 * this->Tempo) + 1) >> 1;
			}
			else if (this->arch == Machine::FMTOWNS) {
				c_VGMT = (src->time * 60 * VGM_CLOCK * MASTERCLOCK_NEC_OPN * 2 * 2 / (48 * this->Tempo * MASTERCLOCK_FMTOWNS_OPN2) + 1) >> 1;
			}
			else { // defaultはPC-9801とする(PC-8801も同)
				c_VGMT = (src->time * 60 * VGM_CLOCK * 2 * 6 / (48 * this->Tempo * 5) + 1) >> 1;
			}

			size_t d_VGMT = c_VGMT - this->Time_Prev_VGM;

			//				wprintf_s(L"%8zu: %zd %zd %zd\n", src->time, c_VGMT, d_VGMT, Time_Prev_VGM);
			this->Time_Prev_VGM += d_VGMT;
			this->Time_Prev_VGM_abs += d_VGMT;
			this->Time_Prev = src->time;

			this->make_wait(d_VGMT);
		}

		if ((src - in.event) == in.length) {
			break;
		}

		if (in.loop_enable && (src - in.event) == in.loop_start) {
			this->Time_Loop_VGM_abs = Time_Prev_VGM_abs;
			this->vgm_loop_pos = this->vgm_pos;
			this->loop_start = src;
			in.loop_enable = false;
		}

		if (this->arch == Machine::FMTOWNS) {
			this->convert_YM2612(*src);
		}
		else {
			this->convert_YM2203(*src);
		}
	}
	this->finish();
}

void VGMdata1::out(wchar_t* p)
{
	FILE* pFo;
	wchar_t* path = filename_replace_ext(p, L".vgm");

	errno_t ecode = _wfopen_s(&pFo, path, L"wb");
	if (ecode || !pFo) {
		fwprintf_s(stderr, L"%s cannot open\n", path);
		exit(ecode);
	}

	fwrite(&h_vgm, 1, this->vgm_header_len, pFo);
	if (this->vgm_extra_len) {
		fwrite(&eh_vgm, 1, sizeof(VGM_HDR_EXTRA), pFo);
		if (this->Ex_Vols_count) {
			fwrite(&this->Ex_Vols_count, 1, 1, pFo);
			fwrite(&this->Ex_Vols, sizeof(VGMX_CHIP_DATA16), this->Ex_Vols_count, pFo);
		}
		UINT8 PADDING[15] = { 0 };
		fwrite(PADDING, 1, this->padsize, pFo);
	}
	fwrite(this->vgm_out, 1, this->vgm_dlen, pFo);
	wprintf_s(L"VGM body length %8zu\n", this->vgm_dlen);

	fclose(pFo);
}

void VGMdata1::convert_YM2612(struct EVENT& eve)
{
	this->CH_cur = eve.CH;
	this->pCHparam_cur = this->pCHparam + this->CH_cur;
	if (this->CH_cur >= 6) {
		return;
	}

	switch (eve.Event) {
	case 0xF4: // Tempo 注意!! ここが変わると累積時間も変わる!! 必ず再計算せよ!!
		this->Time_Prev_VGM = ((this->Time_Prev_VGM * this->Tempo * 2) / eve.Param + 1) >> 1;
		this->Tempo = eve.Param;

		// この後のNAの計算とタイマ割り込みの設定は実際には不要
		// TOWNS版の正しい式が不明のためコメントアウト
		// this->Timer_set_YM2612();
		break;
	case 0xF5: // Tone select
		this->pCHparam_cur->Tone = eve.Param & 0x7F;
		if (this->CH_cur < 3) {
			this->Tone_select_YM2612_FMport0(this->CH_cur);
		}
		else {
			this->Tone_select_YM2612_FMport1(this->CH_cur - 3);
		}
		break;
	case 0x80: // Note Off
		if (this->CH_cur < 3) {
			this->make_data_YM2612port0(0x28, this->CH_cur);
		}
		else {
			this->make_data_YM2612port0(0x28, (this->CH_cur - 3) | 0x04);
		}
		break;
	case 0xF9: // Volume change FMはアルゴリズムに合わせてスロット音量を変える仕様
		this->pCHparam_cur->Volume = ~eve.Param & 0x7F;

		if (this->CH_cur < 3) {
			this->Volume_YM2612_FMport0(this->CH_cur);
		}
		else {
			this->Volume_YM2612_FMport1(this->CH_cur - 3);
		}
		break;
	case 0x90: // Note on
		if (this->CH_cur < 3) {
			this->Note_on_YM2612_FMport0(this->CH_cur);
		}
		else {
			this->Note_on_YM2612_FMport1(this->CH_cur - 3);
		}
		break;
	case 0x97: // Key_set
		this->pCHparam_cur->Key = eve.Param;
		if (this->CH_cur < 3) {
			this->Key_set_YM2612_FMport0(this->CH_cur);
		}
		else {
			this->Key_set_YM2612_FMport1(this->CH_cur - 3);
		}
		break;
	}
}

void VGMdata1::Key_set_YM2612_FMport0(unsigned __int8 CH)
{
	union {
		struct {
			unsigned __int16 FNumber : 11;
			unsigned __int16 Block : 3;
			unsigned __int16 : 2;
		} S;
		unsigned __int8 B[2];
	} U;

	unsigned __int8 Octave = this->pCHparam_cur->Key / 12;
	U.S.FNumber = this->FNumber[this->pCHparam_cur->Key % 12];
	if (Octave == 8) {
		U.S.FNumber <<= 1;
		Octave = 7;
	}
	U.S.Block = Octave;

	this->make_data_YM2612port0(0xA4 + CH, U.B[1]);
	this->make_data_YM2612port0(0xA0 + CH, U.B[0]);
}

void VGMdata1::Key_set_YM2612_FMport1(unsigned __int8 CH)
{
	union {
		struct {
			unsigned __int16 FNumber : 11;
			unsigned __int16 Block : 3;
			unsigned __int16 : 2;
		} S;
		unsigned __int8 B[2];
	} U;

	unsigned __int8 Octave = this->pCHparam_cur->Key / 12;
	U.S.FNumber = this->FNumber[this->pCHparam_cur->Key % 12];
	if (Octave == 8) {
		U.S.FNumber <<= 1;
		Octave = 7;
	}
	U.S.Block = Octave;

	this->make_data_YM2612port1(0xA4 + CH, U.B[1]);
	this->make_data_YM2612port1(0xA0 + CH, U.B[0]);
}

void VGMdata1::Note_on_YM2612_FMport0(unsigned __int8 CH)
{
	union {
		struct {
			unsigned __int8 CH : 2;
			unsigned __int8 Port : 1;
			unsigned __int8 : 1;
			unsigned __int8 Op_mask : 4;
		} S;
		unsigned __int8 B;
	} U;

	U.S = { CH, 0, this->T.S.OPR_MASK };
	this->make_data_YM2612port0(0x28, U.B);
}

void VGMdata1::Note_on_YM2612_FMport1(unsigned __int8 CH)
{
	union {
		struct {
			unsigned __int8 CH : 2;
			unsigned __int8 Port : 1;
			unsigned __int8 : 1;
			unsigned __int8 Op_mask : 4;
		} S;
		unsigned __int8 B;
	} U;

	U.S = { CH, 1, this->T.S.OPR_MASK };
	this->make_data_YM2612port0(0x28, U.B);
}

void VGMdata1::Timer_set_YM2612(void)
{
	size_t NA = 1024 - (((this->master_clock * 2) / (192LL * this->Tempo) + 1) >> 1);
	this->make_data_YM2612port0(0x24, (NA >> 2) & 0xFF);
	this->make_data_YM2612port0(0x25, NA & 0x03);
}

void VGMdata1::Volume_YM2612_FMport0(unsigned __int8 CH)
{
	for (size_t op = 0; op < 4; op++) {
		if (this->pCHparam_cur->Algorithm == 7 || this->pCHparam_cur->Algorithm > 4 && op || this->pCHparam_cur->Algorithm > 3 && op >= 2 || op == 3) {
			this->make_data_YM2612port0(0x40 + 4 * op + CH, this->pCHparam_cur->Volume);
		}
	}
}
void VGMdata1::Volume_YM2612_FMport1(unsigned __int8 CH)
{
	for (size_t op = 0; op < 4; op++) {
		if (this->pCHparam_cur->Algorithm == 7 || this->pCHparam_cur->Algorithm > 4 && op || this->pCHparam_cur->Algorithm > 3 && op >= 2 || op == 3) {
			this->make_data_YM2612port1(0x40 + 4 * op + CH, this->pCHparam_cur->Volume);
		}
	}
}

void VGMdata1::Tone_select_YM2612_FMport0(unsigned __int8 CH)
{
	static unsigned __int8 Op_index[4] = { 0, 8, 4, 0xC };

	this->T.B = *(this->preset + this->pCHparam_cur->Tone);
	this->pCHparam_cur->Algorithm = this->T.S.Connect;

	this->make_data_YM2612port0(0xB0 + CH, this->T.B.FB_CON);

	for (size_t op = 0; op < 4; op++) {
		for (size_t j = 0; j < 6; j++) {
			if (j == 1 && (this->pCHparam_cur->Algorithm == 7 || this->pCHparam_cur->Algorithm > 4 && op || this->pCHparam_cur->Algorithm > 3 && op == 1 || op == 3)) {
			}
			else {
				this->make_data_YM2612port0(0x30 + 0x10 * j + Op_index[op] + CH, *((unsigned __int8*)&T.B.Op[op].DT_MULTI + j));
			}
		}
	}
}
void VGMdata1::Tone_select_YM2612_FMport1(unsigned __int8 CH)
{
	static unsigned __int8 Op_index[4] = { 0, 8, 4, 0xC };

	this->T.B = *(this->preset + this->pCHparam_cur->Tone);
	this->pCHparam_cur->Algorithm = this->T.S.Connect;

	this->make_data_YM2612port1(0xB0 + CH, this->T.B.FB_CON);

	for (size_t op = 0; op < 4; op++) {
		for (size_t j = 0; j < 6; j++) {
			if (j == 1 && (this->pCHparam_cur->Algorithm == 7 || this->pCHparam_cur->Algorithm > 4 && op || this->pCHparam_cur->Algorithm > 3 && op == 1 || op == 3)) {
			}
			else {
				this->make_data_YM2612port1(0x30 + 0x10 * j + Op_index[op] + CH, *((unsigned __int8*)&T.B.Op[op].DT_MULTI + j));
			}
		}
	}
}

